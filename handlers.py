# import asyncio
# import datetime

from aiogram import types
# from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery, LabeledPrice, PreCheckoutQuery)
# from aiogram.utils.callback_data import CallbackData

import database
# import states
from config import admin_id
from load_all import dp, bot, _

db = database.DBCommands()

# –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
@dp.message_handler(CommandStart())
async def register_user(message: types.Message):
    chat_id = message.from_user.id
    referral = message.get_args()
    user = await db.add_new_user(referral=referral)
    id = user.id
    count_users = await db.count_users()

    # –û—Ç–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
    languages_markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
            [
            [
                    InlineKeyboardButton(text="O'zbek üá∫üáø", callback_data="lang_uz")],
            ]
        ]
    )

    bot_username = (await bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={id}"

    # –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏, –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é "_"
    # –í–º–µ—Å—Ç–æ "—Ç–µ–∫—Å—Ç" –ø–µ—Ä–µ–¥–∞–µ–º _("—Ç–µ–∫—Å—Ç")

    text = _("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!!\n"
             "–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ {count_users} —á–µ–ª–æ–≤–µ–∫!\n"
             "\n"
             "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {bot_link}\n"
             "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ: /referrals\n"
             "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã: /items").format(
        count_users=count_users,
        bot_link=bot_link
    )
    if message.from_user.id == admin_id:
        text += _("\n"
                  "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: /add_item")
    await bot.send_message(chat_id, text, reply_markup=languages_markup)


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä text_contains, –æ–Ω —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ call.data
@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    await call.message.edit_reply_markup()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]
    await db.set_language(lang)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang
    await call.message.answer(_("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", locale=lang))


@dp.message_handler(commands=["referrals"])
async def check_referrals(message: types.Message):
    referrals = await db.check_referrals()
    text = _("–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{referrals}").format(referrals=referrals)
    await message.answer(text)


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞
@dp.message_handler()
async def end(message: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
    await message.answer(_('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start –∏ /help'))
